/* automatically generated by rust-bindgen */

#[doc = " \\brief half datatype"]
#[doc = ""]
#[doc = " \\details This structure implements the datatype for storing"]
#[doc = " half-precision floating-point numbers. The structure implements"]
#[doc = " assignment operators and type conversions."]
#[doc = " 16 bits are being used in total: 1 sign bit, 5 bits for the exponent,"]
#[doc = " and the significand is being stored in 10 bits."]
#[doc = " The total precision is 11 bits. There are 15361 representable"]
#[doc = " numbers within the interval [0.0, 1.0], endpoints included."]
#[doc = " On average we have log10(2**11) \u{2248} 3.311 decimal digits."]
#[repr(C)]
pub struct __half {
    pub __x: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout___half() {
    assert_eq!(
        ::std::mem::size_of::<__half>(),
        2usize,
        concat!("Size of: ", stringify!(__half))
    );
    assert_eq!(
        ::std::mem::align_of::<__half>(),
        2usize,
        concat!("Alignment of ", stringify!(__half))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__half>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__half),
            "::",
            stringify!(__x)
        )
    );
}
#[doc = " \\brief half2 datatype"]
#[doc = ""]
#[doc = " \\details This structure implements the datatype for storing two"]
#[doc = " half-precision floating-point numbers."]
#[doc = " The structure implements assignment operators and type conversions."]
#[repr(C)]
pub struct __half2 {
    pub x: __half,
    pub y: __half,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout___half2() {
    assert_eq!(
        ::std::mem::size_of::<__half2>(),
        4usize,
        concat!("Size of: ", stringify!(__half2))
    );
    assert_eq!(
        ::std::mem::align_of::<__half2>(),
        4usize,
        concat!("Alignment of ", stringify!(__half2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__half2>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__half2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__half2>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__half2),
            "::",
            stringify!(y)
        )
    );
}
